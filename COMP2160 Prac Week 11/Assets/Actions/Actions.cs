//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Actions/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""mouse"",
            ""id"": ""d64786fe-da07-4ccb-a905-363f9ba31466"",
            ""actions"": [
                {
                    ""name"": ""position"",
                    ""type"": ""Value"",
                    ""id"": ""2be0bff6-e570-4d71-b0a8-7adabf26b60d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""select"",
                    ""type"": ""Button"",
                    ""id"": ""8bf9dd9a-f831-4f4e-ae80-e4b757e876cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""delta"",
                    ""type"": ""Value"",
                    ""id"": ""9141cb6e-0ccf-47d8-bfa5-c32b5b9d5394"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1b6a23c-8348-4f9a-abe8-d855a3c025b8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""841aedd0-d9c7-4816-ac9f-0956fcecadea"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""796e2692-7d31-4684-863f-199f130def13"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""camera"",
            ""id"": ""ce01b343-c6bd-4e6c-9b99-56748913acb0"",
            ""actions"": [
                {
                    ""name"": ""zoom"",
                    ""type"": ""Value"",
                    ""id"": ""6cd278c2-5ebf-4d19-b7ed-cb8fb99c28f9"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0286e047-03df-4272-b306-62eb0a25ca48"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47b48ee4-fa7e-4c70-a94a-29daf979f84e"",
                    ""path"": ""<Mouse>/scroll/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // mouse
        m_mouse = asset.FindActionMap("mouse", throwIfNotFound: true);
        m_mouse_position = m_mouse.FindAction("position", throwIfNotFound: true);
        m_mouse_select = m_mouse.FindAction("select", throwIfNotFound: true);
        m_mouse_delta = m_mouse.FindAction("delta", throwIfNotFound: true);
        // camera
        m_camera = asset.FindActionMap("camera", throwIfNotFound: true);
        m_camera_zoom = m_camera.FindAction("zoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // mouse
    private readonly InputActionMap m_mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_mouse_position;
    private readonly InputAction m_mouse_select;
    private readonly InputAction m_mouse_delta;
    public struct MouseActions
    {
        private @Actions m_Wrapper;
        public MouseActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @position => m_Wrapper.m_mouse_position;
        public InputAction @select => m_Wrapper.m_mouse_select;
        public InputAction @delta => m_Wrapper.m_mouse_delta;
        public InputActionMap Get() { return m_Wrapper.m_mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @position.started += instance.OnPosition;
            @position.performed += instance.OnPosition;
            @position.canceled += instance.OnPosition;
            @select.started += instance.OnSelect;
            @select.performed += instance.OnSelect;
            @select.canceled += instance.OnSelect;
            @delta.started += instance.OnDelta;
            @delta.performed += instance.OnDelta;
            @delta.canceled += instance.OnDelta;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @position.started -= instance.OnPosition;
            @position.performed -= instance.OnPosition;
            @position.canceled -= instance.OnPosition;
            @select.started -= instance.OnSelect;
            @select.performed -= instance.OnSelect;
            @select.canceled -= instance.OnSelect;
            @delta.started -= instance.OnDelta;
            @delta.performed -= instance.OnDelta;
            @delta.canceled -= instance.OnDelta;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @mouse => new MouseActions(this);

    // camera
    private readonly InputActionMap m_camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_camera_zoom;
    public struct CameraActions
    {
        private @Actions m_Wrapper;
        public CameraActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @zoom => m_Wrapper.m_camera_zoom;
        public InputActionMap Get() { return m_Wrapper.m_camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @zoom.started += instance.OnZoom;
            @zoom.performed += instance.OnZoom;
            @zoom.canceled += instance.OnZoom;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @zoom.started -= instance.OnZoom;
            @zoom.performed -= instance.OnZoom;
            @zoom.canceled -= instance.OnZoom;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @camera => new CameraActions(this);
    public interface IMouseActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnDelta(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnZoom(InputAction.CallbackContext context);
    }
}
